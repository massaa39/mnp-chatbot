version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mnp_chatbot_postgres_dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: mnp_chatbot_dev
      POSTGRES_USER: mnp_user
      POSTGRES_PASSWORD: mnp_password_dev
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/scripts:/docker-entrypoint-initdb.d
    networks:
      - mnp_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mnp_user -d mnp_chatbot_dev"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mnp_chatbot_redis_dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - mnp_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: mnp_chatbot_backend_dev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://mnp_user:mnp_password_dev@postgres:5432/mnp_chatbot_dev
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "3000:3000"
      - "9229:9229"  # Debug port
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mnp_network
    command: npm run dev:debug

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: mnp_chatbot_frontend_dev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:3000/api/v1
      - CHOKIDAR_USEPOLLING=true
    ports:
      - "3001:3001"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - mnp_network
    command: npm start

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: mnp_chatbot_nginx_dev
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/dev/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/dev/default.conf:/etc/nginx/conf.d/default.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - mnp_network

  # Adminer Database Management
  adminer:
    image: adminer:latest
    container_name: mnp_chatbot_adminer_dev
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - mnp_network

  # Redis Commander
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: mnp_chatbot_redis_commander_dev
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    depends_on:
      - redis
    networks:
      - mnp_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  mnp_network:
    driver: bridge